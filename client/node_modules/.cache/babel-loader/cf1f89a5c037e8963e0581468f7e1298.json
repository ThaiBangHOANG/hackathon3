{"ast":null,"code":"var _jsxFileName = \"/home/tb/hackathon3/client/src/components/PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport generateBase64Encode from '../utils/genBase64Encode';\nimport { createNewPost, updatePost } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport * as yup from 'yup';\nimport AlertMessage from './AlertMessage';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Button, ButtonGroup, TextField, Typography, useMediaQuery, IconButton } from '@material-ui/core';\nimport { usePostFormStyles } from '../styles/muiStyles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useTheme } from '@material-ui/core/styles';\nimport TitleIcon from '@material-ui/icons/Title';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LinkIcon from '@material-ui/icons/Link';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  title: yup.string().required('Required'),\n  textSubmission: yup.string(),\n  imageSubmission: yup.string(),\n  linkSubmission: yup.string().matches(/^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\\\-\\\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/, 'Valid URL required')\n});\n\nconst AddPostForm = ({\n  postType,\n  actionType,\n  postToEditType,\n  postToEditTitle,\n  postToEditSub,\n  postToEditId,\n  textSubmission,\n  linkSubmission,\n  fromSubreddit\n}) => {\n  _s();\n\n  const [fileName, setFileName] = useState('');\n  const [error, setError] = useState(null);\n  const {\n    subs\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n  const classes = usePostFormStyles();\n\n  const fileInputOnChange = (e, setFieldValue) => {\n    const file = e.target.files[0];\n    setFileName(file.name);\n    generateBase64Encode(file, setFieldValue);\n  };\n\n  const clearFileSelection = setFieldValue => {\n    setFieldValue('imageSubmission', '');\n    setFileName('');\n  };\n\n  const handleAddPost = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      setSubmitting(true);\n      const postId = await dispatch(createNewPost(values));\n      setSubmitting(false);\n      history.push(`/comments/${postId}`);\n      dispatch(notify('Added new post!', 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  const handleUpdatePost = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(updatePost(postToEditId, values));\n      setSubmitting(false);\n      history.push(`/comments/${postToEditId}`);\n      dispatch(notify('Successfully updated the post!', 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        title: actionType === 'edit' ? postToEditTitle : '',\n        postType: actionType === 'edit' ? postToEditType : postType,\n        textSubmission: actionType === 'edit' ? textSubmission : '',\n        linkSubmission: actionType === 'edit' ? linkSubmission : '',\n        imageSubmission: '',\n        subreddit: actionType === 'edit' ? postToEditSub.id : !fromSubreddit ? '' : fromSubreddit.id\n      },\n      onSubmit: actionType === 'edit' ? handleUpdatePost : handleAddPost,\n      validationSchema: validationSchema,\n      children: ({\n        isSubmitting,\n        values,\n        setFieldValue\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: classes.form,\n        children: [actionType !== 'edit' && /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          color: \"secondary\",\n          fullWidth: true,\n          className: classes.typeBtnGroup,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setFieldValue('postType', 'Text'),\n            variant: values.postType === 'Text' ? 'contained' : 'outlined',\n            children: [/*#__PURE__*/_jsxDEV(TextFormatIcon, {\n              style: {\n                marginRight: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, this), \"Text\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setFieldValue('postType', 'Image'),\n            variant: values.postType === 'Image' ? 'contained' : 'outlined',\n            children: [/*#__PURE__*/_jsxDEV(ImageIcon, {\n              style: {\n                marginRight: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 19\n            }, this), \"Image\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setFieldValue('postType', 'Link'),\n            variant: values.postType === 'Link' ? 'contained' : 'outlined',\n            children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n              style: {\n                marginRight: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 19\n            }, this), \"Link\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.input,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.inputIconText,\n            color: \"primary\",\n            variant: \"h5\",\n            children: \"r/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            name: \"subreddit\",\n            onChange: (e, value) => setFieldValue('subreddit', value ? value.id : ''),\n            fullWidth: true,\n            options: subs && subs.allSubs,\n            disabled: actionType === 'edit' || !!fromSubreddit,\n            getOptionLabel: option => option.subredditName,\n            getOptionSelected: (option, value) => option.id === value.id,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              label: actionType === 'edit' ? postToEditSub.subredditName : !fromSubreddit ? 'Choose a subreddish' : fromSubreddit.subredditName,\n              placeholder: \"Search by name\",\n              required: true,\n              disabled: actionType === 'edit' || !!fromSubreddit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.input,\n          children: [/*#__PURE__*/_jsxDEV(TitleIcon, {\n            className: classes.inputIcon,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"title\",\n            type: \"text\",\n            placeholder: \"Enter title\",\n            label: \"Title\",\n            required: true,\n            fullWidth: true,\n            disabled: actionType === 'edit'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), values.postType === 'Text' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.textInput,\n          children: [/*#__PURE__*/_jsxDEV(ChatIcon, {\n            className: classes.inputIcon,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"textSubmission\",\n            placeholder: `Enter text (HTML supported. For ex, \"<h1>Like this?</h1>\")`,\n            multiline: true,\n            label: \"Text\",\n            required: values.postType === 'Text',\n            fullWidth: true,\n            variant: \"outlined\",\n            rows: 4,\n            maxRows: Infinity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this), values.postType === 'Image' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imageInput,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.imageBtnsWrapper,\n            children: [/*#__PURE__*/_jsxDEV(ImageIcon, {\n              className: classes.inputIcon,\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"image-upload\",\n              accept: \"image/*\",\n              hidden: true,\n              onChange: e => fileInputOnChange(e, setFieldValue),\n              required: values.postType === 'Image'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              component: \"label\",\n              htmlFor: \"image-upload\",\n              variant: \"outlined\",\n              color: \"primary\",\n              fullWidth: true,\n              startIcon: values.imageSubmission ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(PublishIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 25\n              }, this),\n              size: isMobile ? 'small' : 'medium',\n              className: classes.selectBtn,\n              children: values.imageSubmission ? `${isMobile ? '' : 'Selected '}\"${fileName}\"` : `Select Image`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 19\n            }, this), values.imageSubmission && /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => clearFileSelection(setFieldValue),\n              color: \"secondary\",\n              size: isMobile ? 'small' : 'medium',\n              className: classes.clearSelectionBtn,\n              children: /*#__PURE__*/_jsxDEV(CancelIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this), values.imageSubmission && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.imagePreview,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              alt: fileName,\n              src: values.imageSubmission,\n              width: isMobile ? 250 : 350\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this), values.postType === 'Link' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.input,\n          children: [/*#__PURE__*/_jsxDEV(LinkIcon, {\n            className: classes.inputIcon,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"linkSubmission\",\n            type: \"text\",\n            placeholder: \"Enter URL\",\n            label: \"Link\",\n            required: values.postType === 'Link',\n            fullWidth: true,\n            variant: actionType === 'edit' ? 'outlined' : 'standard'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          color: \"secondary\",\n          variant: \"contained\",\n          size: \"large\",\n          className: classes.submitButton,\n          disabled: isSubmitting,\n          startIcon: postToEditId ? /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(PostAddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 56\n          }, this),\n          children: postToEditId ? isSubmitting ? 'Updating' : 'Update' : isSubmitting ? 'Posting' : 'Post'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertMessage, {\n      error: error,\n      severity: \"error\",\n      clearError: () => setError(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddPostForm, \"yx7Ybezi26EF6lukvmZz6eBbfUM=\", false, function () {\n  return [useSelector, useDispatch, useHistory, useTheme, useMediaQuery, usePostFormStyles];\n});\n\n_c = AddPostForm;\nexport default AddPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPostForm\");","map":{"version":3,"sources":["/home/tb/hackathon3/client/src/components/PostForm.js"],"names":["React","useState","useSelector","useDispatch","useHistory","Formik","Form","TextInput","generateBase64Encode","createNewPost","updatePost","notify","yup","AlertMessage","getErrorMsg","Button","ButtonGroup","TextField","Typography","useMediaQuery","IconButton","usePostFormStyles","Autocomplete","useTheme","TitleIcon","TextFormatIcon","ImageIcon","LinkIcon","PublishIcon","CheckCircleIcon","CancelIcon","ChatIcon","PostAddIcon","EditIcon","validationSchema","object","title","string","required","textSubmission","imageSubmission","linkSubmission","matches","AddPostForm","postType","actionType","postToEditType","postToEditTitle","postToEditSub","postToEditId","fromSubreddit","fileName","setFileName","error","setError","subs","state","dispatch","history","theme","isMobile","breakpoints","down","classes","fileInputOnChange","e","setFieldValue","file","target","files","name","clearFileSelection","handleAddPost","values","setSubmitting","postId","push","err","handleUpdatePost","root","subreddit","id","isSubmitting","form","typeBtnGroup","marginRight","input","inputIconText","value","allSubs","option","subredditName","params","inputIcon","textInput","Infinity","imageInput","imageBtnsWrapper","selectBtn","clearSelectionBtn","imagePreview","submitButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport generateBase64Encode from '../utils/genBase64Encode';\nimport { createNewPost, updatePost } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport * as yup from 'yup';\nimport AlertMessage from './AlertMessage';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport {\n  Button,\n  ButtonGroup,\n  TextField,\n  Typography,\n  useMediaQuery,\n  IconButton,\n} from '@material-ui/core';\nimport { usePostFormStyles } from '../styles/muiStyles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useTheme } from '@material-ui/core/styles';\nimport TitleIcon from '@material-ui/icons/Title';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LinkIcon from '@material-ui/icons/Link';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst validationSchema = yup.object({\n  title: yup.string().required('Required'),\n  textSubmission: yup.string(),\n  imageSubmission: yup.string(),\n  linkSubmission: yup\n    .string()\n    .matches(\n      /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\\\-\\\\.]{1}[a-z0-9]+)*\\.[a-z]{2,6}(:[0-9]{1,5})?(\\/.*)?$/,\n      'Valid URL required'\n    ),\n});\n\nconst AddPostForm = ({\n  postType,\n  actionType,\n  postToEditType,\n  postToEditTitle,\n  postToEditSub,\n  postToEditId,\n  textSubmission,\n  linkSubmission,\n  fromSubreddit,\n}) => {\n  const [fileName, setFileName] = useState('');\n  const [error, setError] = useState(null);\n  const { subs } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n  const classes = usePostFormStyles();\n\n  const fileInputOnChange = (e, setFieldValue) => {\n    const file = e.target.files[0];\n    setFileName(file.name);\n    generateBase64Encode(file, setFieldValue);\n  };\n\n  const clearFileSelection = (setFieldValue) => {\n    setFieldValue('imageSubmission', '');\n    setFileName('');\n  };\n\n  const handleAddPost = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      const postId = await dispatch(createNewPost(values));\n      setSubmitting(false);\n      history.push(`/comments/${postId}`);\n      dispatch(notify('Added new post!', 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  const handleUpdatePost = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(updatePost(postToEditId, values));\n      setSubmitting(false);\n      history.push(`/comments/${postToEditId}`);\n      dispatch(notify('Successfully updated the post!', 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      setError(getErrorMsg(err));\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Formik\n        initialValues={{\n          title: actionType === 'edit' ? postToEditTitle : '',\n          postType: actionType === 'edit' ? postToEditType : postType,\n          textSubmission: actionType === 'edit' ? textSubmission : '',\n          linkSubmission: actionType === 'edit' ? linkSubmission : '',\n          imageSubmission: '',\n          subreddit:\n            actionType === 'edit'\n              ? postToEditSub.id\n              : !fromSubreddit\n              ? ''\n              : fromSubreddit.id,\n        }}\n        onSubmit={actionType === 'edit' ? handleUpdatePost : handleAddPost}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting, values, setFieldValue }) => (\n          <Form className={classes.form}>\n            {actionType !== 'edit' && (\n              <ButtonGroup\n                color='secondary'\n                fullWidth\n                className={classes.typeBtnGroup}\n              >\n                <Button\n                  onClick={() => setFieldValue('postType', 'Text')}\n                  variant={\n                    values.postType === 'Text' ? 'contained' : 'outlined'\n                  }\n                >\n                  <TextFormatIcon style={{ marginRight: 2 }} />\n                  Text\n                </Button>\n                <Button\n                  onClick={() => setFieldValue('postType', 'Image')}\n                  variant={\n                    values.postType === 'Image' ? 'contained' : 'outlined'\n                  }\n                >\n                  <ImageIcon style={{ marginRight: 5 }} />\n                  Image\n                </Button>\n                <Button\n                  onClick={() => setFieldValue('postType', 'Link')}\n                  variant={\n                    values.postType === 'Link' ? 'contained' : 'outlined'\n                  }\n                >\n                  <LinkIcon style={{ marginRight: 5 }} />\n                  Link\n                </Button>\n              </ButtonGroup>\n            )}\n            <div className={classes.input}>\n              <Typography\n                className={classes.inputIconText}\n                color='primary'\n                variant='h5'\n              >\n                r/\n              </Typography>\n              <Autocomplete\n                name='subreddit'\n                onChange={(e, value) =>\n                  setFieldValue('subreddit', value ? value.id : '')\n                }\n                fullWidth\n                options={subs && subs.allSubs}\n                disabled={actionType === 'edit' || !!fromSubreddit}\n                getOptionLabel={(option) => option.subredditName}\n                getOptionSelected={(option, value) => option.id === value.id}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    label={\n                      actionType === 'edit'\n                        ? postToEditSub.subredditName\n                        : !fromSubreddit\n                        ? 'Choose a subreddish'\n                        : fromSubreddit.subredditName\n                    }\n                    placeholder='Search by name'\n                    required\n                    disabled={actionType === 'edit' || !!fromSubreddit}\n                  />\n                )}\n              />\n            </div>\n            <div className={classes.input}>\n              <TitleIcon className={classes.inputIcon} color='primary' />\n              <TextInput\n                name='title'\n                type='text'\n                placeholder='Enter title'\n                label='Title'\n                required\n                fullWidth\n                disabled={actionType === 'edit'}\n              />\n            </div>\n            {values.postType === 'Text' && (\n              <div className={classes.textInput}>\n                <ChatIcon className={classes.inputIcon} color='primary' />\n                <TextInput\n                  name='textSubmission'\n                  placeholder={`Enter text (HTML supported. For ex, \"<h1>Like this?</h1>\")`}\n                  multiline\n                  label='Text'\n                  required={values.postType === 'Text'}\n                  fullWidth\n                  variant='outlined'\n                  rows={4}\n                  maxRows={Infinity}\n                />\n              </div>\n            )}\n            {values.postType === 'Image' && (\n              <div className={classes.imageInput}>\n                <div className={classes.imageBtnsWrapper}>\n                  <ImageIcon className={classes.inputIcon} color='primary' />\n                  <input\n                    type='file'\n                    id='image-upload'\n                    accept='image/*'\n                    hidden\n                    onChange={(e) => fileInputOnChange(e, setFieldValue)}\n                    required={values.postType === 'Image'}\n                  />\n                  <Button\n                    component='label'\n                    htmlFor='image-upload'\n                    variant='outlined'\n                    color='primary'\n                    fullWidth\n                    startIcon={\n                      values.imageSubmission ? (\n                        <CheckCircleIcon />\n                      ) : (\n                        <PublishIcon />\n                      )\n                    }\n                    size={isMobile ? 'small' : 'medium'}\n                    className={classes.selectBtn}\n                  >\n                    {values.imageSubmission\n                      ? `${isMobile ? '' : 'Selected '}\"${fileName}\"`\n                      : `Select Image`}\n                  </Button>\n                  {values.imageSubmission && (\n                    <IconButton\n                      onClick={() => clearFileSelection(setFieldValue)}\n                      color='secondary'\n                      size={isMobile ? 'small' : 'medium'}\n                      className={classes.clearSelectionBtn}\n                    >\n                      <CancelIcon />\n                    </IconButton>\n                  )}\n                </div>\n                {values.imageSubmission && (\n                  <div className={classes.imagePreview}>\n                    <img\n                      alt={fileName}\n                      src={values.imageSubmission}\n                      width={isMobile ? 250 : 350}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n            {values.postType === 'Link' && (\n              <div className={classes.input}>\n                <LinkIcon className={classes.inputIcon} color='primary' />\n                <TextInput\n                  name='linkSubmission'\n                  type='text'\n                  placeholder='Enter URL'\n                  label='Link'\n                  required={values.postType === 'Link'}\n                  fullWidth\n                  variant={actionType === 'edit' ? 'outlined' : 'standard'}\n                />\n              </div>\n            )}\n            <Button\n              type='submit'\n              color='secondary'\n              variant='contained'\n              size='large'\n              className={classes.submitButton}\n              disabled={isSubmitting}\n              startIcon={postToEditId ? <EditIcon /> : <PostAddIcon />}\n            >\n              {postToEditId\n                ? isSubmitting\n                  ? 'Updating'\n                  : 'Update'\n                : isSubmitting\n                ? 'Posting'\n                : 'Post'}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <AlertMessage\n        error={error}\n        severity='error'\n        clearError={() => setError(null)}\n      />\n    </div>\n  );\n};\n\nexport default AddPostForm;\n"]},"metadata":{},"sourceType":"module"}