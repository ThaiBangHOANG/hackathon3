{"ast":null,"code":"var _jsxFileName = \"/home/wilder/hacka3/hackathon3/client/src/components/PostCommentsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link as RouterLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPostComments, toggleUpvote, toggleDownvote } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport CommentInput from './CommentInput';\nimport { UpvoteButton, DownvoteButton } from './VoteButtons';\nimport EditDeleteMenu from './EditDeleteMenu';\nimport CommentsDisplay from './CommentsDisplay';\nimport SortCommentsMenu from './SortCommentsMenu';\nimport ErrorPage from './ErrorPage';\nimport LoadingSpinner from './LoadingSpinner';\nimport TimeAgo from 'timeago-react';\nimport { trimLink, prettifyLink, fixUrl } from '../utils/formatUrl';\nimport ReactHtmlParser from 'react-html-parser';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Container, Paper, useMediaQuery, Typography, Link, MenuItem, ListItemIcon, Divider } from '@material-ui/core';\nimport { usePostCommentsStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport CommentIcon from '@material-ui/icons/Comment';\n\nconst PostCommentsPage = () => {\n  _s();\n\n  const {\n    id: postId\n  } = useParams();\n  const post = useSelector(state => state.postComments);\n  const {\n    user,\n    darkMode\n  } = useSelector(state => state);\n  const [pageLoading, setPageLoading] = useState(true);\n  const [pageError, setPageError] = useState(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const getComments = async () => {\n      try {\n        await dispatch(fetchPostComments(postId));\n        setPageLoading(false);\n      } catch (err) {\n        setPageError(getErrorMsg(err));\n      }\n    };\n\n    getComments(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [postId]);\n  const classes = usePostCommentsStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n  if (pageError) {\n    return /*#__PURE__*/React.createElement(Container, {\n      disableGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      variant: \"outlined\",\n      className: classes.mainPaper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ErrorPage, {\n      errorMsg: pageError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  if (!post || pageLoading) {\n    return /*#__PURE__*/React.createElement(Container, {\n      disableGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      variant: \"outlined\",\n      className: classes.mainPaper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      text: 'Fetching post comments...',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  const {\n    id,\n    title,\n    postType,\n    textSubmission,\n    linkSubmission,\n    imageSubmission,\n    subreddit,\n    author,\n    upvotedBy,\n    downvotedBy,\n    pointsCount,\n    comments,\n    commentCount,\n    createdAt,\n    updatedAt\n  } = post;\n  const isUpvoted = user && upvotedBy.includes(user.id);\n  const isDownvoted = user && downvotedBy.includes(user.id);\n\n  const handleUpvoteToggle = async () => {\n    try {\n      if (isUpvoted) {\n        const updatedUpvotedBy = upvotedBy.filter(u => u !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, downvotedBy));\n      } else {\n        const updatedUpvotedBy = [...upvotedBy, user.id];\n        const updatedDownvotedBy = downvotedBy.filter(d => d !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, updatedDownvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const handleDownvoteToggle = async () => {\n    try {\n      if (isDownvoted) {\n        const updatedDownvotedBy = downvotedBy.filter(d => d !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, upvotedBy));\n      } else {\n        const updatedDownvotedBy = [...downvotedBy, user.id];\n        const updatedUpvotedBy = upvotedBy.filter(u => u !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, updatedUpvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const formattedLink = postType === 'Link' && trimLink(prettifyLink(linkSubmission), 70);\n  return /*#__PURE__*/React.createElement(Container, {\n    disableGutters: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    className: classes.mainPaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.topPortion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.votesWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(UpvoteButton, {\n    user: user,\n    body: post,\n    handleUpvote: handleUpvoteToggle,\n    size: isMobile ? 'small' : 'medium',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    style: {\n      color: isUpvoted ? '#FF8b60' : isDownvoted ? '#9494FF' : darkMode ? '#e4e4e4' : '#333',\n      fontWeight: 600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, pointsCount), /*#__PURE__*/React.createElement(DownvoteButton, {\n    user: user,\n    body: post,\n    handleDownvote: handleDownvoteToggle,\n    size: isMobile ? 'small' : 'medium',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.postDetails,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    component: RouterLink,\n    to: `/r/${subreddit.subredditName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 15\n    }\n  }, `r/${subreddit.subredditName} `), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.userAndDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  }, \"\\u2022 Posted by\", /*#__PURE__*/React.createElement(Link, {\n    component: RouterLink,\n    to: `/u/${author.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, ` u/${author.username} `), \"\\u2022 \", /*#__PURE__*/React.createElement(TimeAgo, {\n    datetime: new Date(createdAt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 19\n    }\n  }), createdAt !== updatedAt && /*#__PURE__*/React.createElement(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, ' â€¢ edited', \" \", /*#__PURE__*/React.createElement(TimeAgo, {\n    datetime: new Date(updatedAt),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 35\n    }\n  })))), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, title), postType === 'Text' ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 15\n    }\n  }, ReactHtmlParser(textSubmission)) : postType === 'Image' ? /*#__PURE__*/React.createElement(\"a\", {\n    href: imageSubmission.imageLink,\n    alt: title,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: classes.imagePost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: title,\n    src: imageSubmission.imageLink,\n    className: classes.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(Link, {\n    href: fixUrl(linkSubmission),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, formattedLink, \" \", /*#__PURE__*/React.createElement(OpenInNewIcon, {\n    fontSize: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MenuItem, {\n    className: classes.bottomButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CommentIcon, {\n    className: classes.commentIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 19\n    }\n  }, commentCount))), user && user.id === author.id && /*#__PURE__*/React.createElement(EditDeleteMenu, {\n    id: id,\n    isMobile: isMobile,\n    title: title,\n    postType: postType,\n    subreddit: subreddit,\n    buttonType: \"buttonGroup\",\n    textSubmission: textSubmission,\n    linkSubmission: linkSubmission,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(CommentInput, {\n    user: user,\n    postId: id,\n    isMobile: isMobile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SortCommentsMenu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CommentsDisplay, {\n    comments: comments,\n    postId: id,\n    isMobile: isMobile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(PostCommentsPage, \"9LkXJBN33xdizQYTlP9cbnP4pNY=\", false, function () {\n  return [useParams, useSelector, useSelector, useDispatch, usePostCommentsStyles, useTheme, useMediaQuery];\n});\n\n_c = PostCommentsPage;\nexport default PostCommentsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCommentsPage\");","map":{"version":3,"sources":["/home/wilder/hacka3/hackathon3/client/src/components/PostCommentsPage.js"],"names":["React","useEffect","useState","useParams","Link","RouterLink","useSelector","useDispatch","fetchPostComments","toggleUpvote","toggleDownvote","notify","CommentInput","UpvoteButton","DownvoteButton","EditDeleteMenu","CommentsDisplay","SortCommentsMenu","ErrorPage","LoadingSpinner","TimeAgo","trimLink","prettifyLink","fixUrl","ReactHtmlParser","getErrorMsg","Container","Paper","useMediaQuery","Typography","MenuItem","ListItemIcon","Divider","usePostCommentsStyles","useTheme","OpenInNewIcon","CommentIcon","PostCommentsPage","id","postId","post","state","postComments","user","darkMode","pageLoading","setPageLoading","pageError","setPageError","dispatch","getComments","err","classes","theme","isMobile","breakpoints","down","mainPaper","title","postType","textSubmission","linkSubmission","imageSubmission","subreddit","author","upvotedBy","downvotedBy","pointsCount","comments","commentCount","createdAt","updatedAt","isUpvoted","includes","isDownvoted","handleUpvoteToggle","updatedUpvotedBy","filter","u","updatedDownvotedBy","d","handleDownvoteToggle","formattedLink","topPortion","votesWrapper","color","fontWeight","postDetails","subredditName","userAndDate","username","Date","imageLink","imagePost","image","bottomBar","bottomButton","commentIcon","divider"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams, Link as RouterLink } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchPostComments,\n  toggleUpvote,\n  toggleDownvote,\n} from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport CommentInput from './CommentInput';\nimport { UpvoteButton, DownvoteButton } from './VoteButtons';\nimport EditDeleteMenu from './EditDeleteMenu';\nimport CommentsDisplay from './CommentsDisplay';\nimport SortCommentsMenu from './SortCommentsMenu';\nimport ErrorPage from './ErrorPage';\nimport LoadingSpinner from './LoadingSpinner';\nimport TimeAgo from 'timeago-react';\nimport { trimLink, prettifyLink, fixUrl } from '../utils/formatUrl';\nimport ReactHtmlParser from 'react-html-parser';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport {\n  Container,\n  Paper,\n  useMediaQuery,\n  Typography,\n  Link,\n  MenuItem,\n  ListItemIcon,\n  Divider,\n} from '@material-ui/core';\nimport { usePostCommentsStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport CommentIcon from '@material-ui/icons/Comment';\n\nconst PostCommentsPage = () => {\n  const { id: postId } = useParams();\n  const post = useSelector((state) => state.postComments);\n  const { user, darkMode } = useSelector((state) => state);\n  const [pageLoading, setPageLoading] = useState(true);\n  const [pageError, setPageError] = useState(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const getComments = async () => {\n      try {\n        await dispatch(fetchPostComments(postId));\n        setPageLoading(false);\n      } catch (err) {\n        setPageError(getErrorMsg(err));\n      }\n    };\n    getComments();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [postId]);\n\n  const classes = usePostCommentsStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n  if (pageError) {\n    return (\n      <Container disableGutters>\n        <Paper variant='outlined' className={classes.mainPaper}>\n          <ErrorPage errorMsg={pageError} />\n        </Paper>\n      </Container>\n    );\n  }\n\n  if (!post || pageLoading) {\n    return (\n      <Container disableGutters>\n        <Paper variant='outlined' className={classes.mainPaper}>\n          <LoadingSpinner text={'Fetching post comments...'} />\n        </Paper>\n      </Container>\n    );\n  }\n\n  const {\n    id,\n    title,\n    postType,\n    textSubmission,\n    linkSubmission,\n    imageSubmission,\n    subreddit,\n    author,\n    upvotedBy,\n    downvotedBy,\n    pointsCount,\n    comments,\n    commentCount,\n    createdAt,\n    updatedAt,\n  } = post;\n\n  const isUpvoted = user && upvotedBy.includes(user.id);\n  const isDownvoted = user && downvotedBy.includes(user.id);\n\n  const handleUpvoteToggle = async () => {\n    try {\n      if (isUpvoted) {\n        const updatedUpvotedBy = upvotedBy.filter((u) => u !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, downvotedBy));\n      } else {\n        const updatedUpvotedBy = [...upvotedBy, user.id];\n        const updatedDownvotedBy = downvotedBy.filter((d) => d !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, updatedDownvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const handleDownvoteToggle = async () => {\n    try {\n      if (isDownvoted) {\n        const updatedDownvotedBy = downvotedBy.filter((d) => d !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, upvotedBy));\n      } else {\n        const updatedDownvotedBy = [...downvotedBy, user.id];\n        const updatedUpvotedBy = upvotedBy.filter((u) => u !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, updatedUpvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const formattedLink =\n    postType === 'Link' && trimLink(prettifyLink(linkSubmission), 70);\n\n  return (\n    <Container disableGutters>\n      <Paper variant='outlined' className={classes.mainPaper}>\n        <div className={classes.topPortion}>\n          <div className={classes.votesWrapper}>\n            <UpvoteButton\n              user={user}\n              body={post}\n              handleUpvote={handleUpvoteToggle}\n              size={isMobile ? 'small' : 'medium'}\n            />\n            <Typography\n              variant='body1'\n              style={{\n                color: isUpvoted\n                  ? '#FF8b60'\n                  : isDownvoted\n                  ? '#9494FF'\n                  : darkMode\n                  ? '#e4e4e4'\n                  : '#333',\n                fontWeight: 600,\n              }}\n            >\n              {pointsCount}\n            </Typography>\n            <DownvoteButton\n              user={user}\n              body={post}\n              handleDownvote={handleDownvoteToggle}\n              size={isMobile ? 'small' : 'medium'}\n            />\n          </div>\n          <div className={classes.postDetails}>\n            <Typography variant='subtitle2'>\n              <Link component={RouterLink} to={`/r/${subreddit.subredditName}`}>\n                {`r/${subreddit.subredditName} `}\n              </Link>\n              <Typography variant='caption' className={classes.userAndDate}>\n                â€¢ Posted by\n                <Link component={RouterLink} to={`/u/${author.username}`}>\n                  {` u/${author.username} `}\n                </Link>\n                â€¢ <TimeAgo datetime={new Date(createdAt)} />\n                {createdAt !== updatedAt && (\n                  <em>\n                    {' â€¢ edited'} <TimeAgo datetime={new Date(updatedAt)} />\n                  </em>\n                )}\n              </Typography>\n            </Typography>\n            <Typography variant='h5' className={classes.title}>\n              {title}\n            </Typography>\n            {postType === 'Text' ? (\n              <div>{ReactHtmlParser(textSubmission)}</div>\n            ) : postType === 'Image' ? (\n              <a\n                href={imageSubmission.imageLink}\n                alt={title}\n                target='_blank'\n                rel='noopener noreferrer'\n                className={classes.imagePost}\n              >\n                <img\n                  alt={title}\n                  src={imageSubmission.imageLink}\n                  className={classes.image}\n                />\n              </a>\n            ) : (\n              <Link href={fixUrl(linkSubmission)}>\n                {formattedLink} <OpenInNewIcon fontSize='inherit' />\n              </Link>\n            )}\n            <div className={classes.bottomBar}>\n              <MenuItem className={classes.bottomButton}>\n                <ListItemIcon>\n                  <CommentIcon className={classes.commentIcon} />\n                  <Typography variant='subtitle2'>{commentCount}</Typography>\n                </ListItemIcon>\n              </MenuItem>\n              {user && user.id === author.id && (\n                <EditDeleteMenu\n                  id={id}\n                  isMobile={isMobile}\n                  title={title}\n                  postType={postType}\n                  subreddit={subreddit}\n                  buttonType='buttonGroup'\n                  textSubmission={textSubmission}\n                  linkSubmission={linkSubmission}\n                />\n              )}\n            </div>\n            <CommentInput user={user} postId={id} isMobile={isMobile} />\n            <SortCommentsMenu />\n          </div>\n        </div>\n        <Divider className={classes.divider} />\n        <CommentsDisplay comments={comments} postId={id} isMobile={isMobile} />\n      </Paper>\n    </Container>\n  );\n};\n\nexport default PostCommentsPage;\n"]},"metadata":{},"sourceType":"module"}