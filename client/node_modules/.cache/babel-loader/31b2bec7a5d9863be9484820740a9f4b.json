{"ast":null,"code":"var _jsxFileName = \"/home/wilder/Desktop/hackathon3/client/src/components/CommentInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { addComment } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Link, Typography, TextField, Button } from '@material-ui/core';\nimport { useCommentInputStyles } from '../styles/muiStyles';\nimport SendIcon from '@material-ui/icons/Send';\n\nconst CommentInput = ({\n  user,\n  postId,\n  isMobile\n}) => {\n  _s();\n\n  const classes = useCommentInputStyles();\n  const dispatch = useDispatch();\n  const [comment, setComment] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n  const handlePostComment = async e => {\n    e.preventDefault();\n\n    try {\n      setSubmitting(true);\n      await dispatch(addComment(postId, comment));\n      setSubmitting(false);\n      setComment('');\n      dispatch(notify(`Comment submitted!`, 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, user ? /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Comment as\", ' ', /*#__PURE__*/React.createElement(Link, {\n    component: RouterLink,\n    to: `/u/${user.username}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, user.username)) : /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"Log in or sign up to leave a comment\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    onSubmit: handlePostComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    placeholder: `What are your thoughts?`,\n    multiline: true,\n    fullWidth: true,\n    required: true,\n    rows: 4,\n    rowsMax: Infinity,\n    value: comment,\n    onChange: e => setComment(e.target.value),\n    variant: \"outlined\",\n    size: isMobile ? 'small' : 'medium',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    className: classes.commentBtn,\n    startIcon: /*#__PURE__*/React.createElement(SendIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 22\n      }\n    }),\n    size: isMobile ? 'small' : 'medium',\n    disabled: !user || submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, !user ? 'Login to comment' : submitting ? 'Commenting' : 'Comment')));\n};\n\n_s(CommentInput, \"btuTHi0JyVzdVpxmx0T3wFNZr/U=\", false, function () {\n  return [useCommentInputStyles, useDispatch];\n});\n\n_c = CommentInput;\nexport default CommentInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentInput\");","map":{"version":3,"sources":["/home/wilder/Desktop/hackathon3/client/src/components/CommentInput.js"],"names":["React","useState","Link","RouterLink","useDispatch","addComment","notify","getErrorMsg","Typography","TextField","Button","useCommentInputStyles","SendIcon","CommentInput","user","postId","isMobile","classes","dispatch","comment","setComment","submitting","setSubmitting","handlePostComment","e","preventDefault","err","wrapper","username","form","Infinity","target","value","commentBtn"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { addComment } from '../reducers/postCommentsReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport { Link, Typography, TextField, Button } from '@material-ui/core';\nimport { useCommentInputStyles } from '../styles/muiStyles';\nimport SendIcon from '@material-ui/icons/Send';\n\nconst CommentInput = ({ user, postId, isMobile }) => {\n  const classes = useCommentInputStyles();\n  const dispatch = useDispatch();\n  const [comment, setComment] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n  const handlePostComment = async (e) => {\n    e.preventDefault();\n    try {\n      setSubmitting(true);\n      await dispatch(addComment(postId, comment));\n      setSubmitting(false);\n      setComment('');\n      dispatch(notify(`Comment submitted!`, 'success'));\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return (\n    <div className={classes.wrapper}>\n      {user ? (\n        <Typography variant='body2'>\n          Comment as{' '}\n          <Link component={RouterLink} to={`/u/${user.username}`}>\n            {user.username}\n          </Link>\n        </Typography>\n      ) : (\n        <Typography variant='body1'>\n          Log in or sign up to leave a comment\n        </Typography>\n      )}\n      <form className={classes.form} onSubmit={handlePostComment}>\n        <TextField\n          placeholder={`What are your thoughts?`}\n          multiline\n          fullWidth\n          required\n          rows={4}\n          rowsMax={Infinity}\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n          variant='outlined'\n          size={isMobile ? 'small' : 'medium'}\n        />\n        <Button\n          type='submit'\n          color='primary'\n          variant='contained'\n          className={classes.commentBtn}\n          startIcon={<SendIcon />}\n          size={isMobile ? 'small' : 'medium'}\n          disabled={!user || submitting}\n        >\n          {!user ? 'Login to comment' : submitting ? 'Commenting' : 'Comment'}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default CommentInput;\n"]},"metadata":{},"sourceType":"module"}