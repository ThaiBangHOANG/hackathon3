{"ast":null,"code":"var _jsxFileName = \"/home/wilder/Desktop/hackathon3/client/src/components/UserPostCard.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleUpvote, toggleDownvote } from '../reducers/userPageReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport { UpvoteButton, DownvoteButton } from './VoteButtons';\nimport TimeAgo from 'timeago-react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { trimLink, prettifyLink, fixUrl } from '../utils/formatUrl';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { Paper, Typography, Link, Button } from '@material-ui/core';\nimport { useUserPostCardStyles } from '../styles/muiStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserPostCard = ({\n  post,\n  user,\n  isMobile\n}) => {\n  _s();\n\n  const classes = useUserPostCardStyles();\n  const dispatch = useDispatch();\n  const {\n    darkMode\n  } = useSelector(state => state);\n  const {\n    id,\n    title,\n    postType,\n    textSubmission,\n    linkSubmission,\n    imageSubmission,\n    subreddit,\n    author,\n    upvotedBy,\n    downvotedBy,\n    pointsCount,\n    commentCount,\n    createdAt,\n    updatedAt\n  } = post;\n  const isUpvoted = user && upvotedBy.includes(user.id);\n  const isDownvoted = user && downvotedBy.includes(user.id);\n\n  const handleUpvoteToggle = async () => {\n    try {\n      if (isUpvoted) {\n        const updatedUpvotedBy = upvotedBy.filter(u => u !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, downvotedBy));\n      } else {\n        const updatedUpvotedBy = [...upvotedBy, user.id];\n        const updatedDownvotedBy = downvotedBy.filter(d => d !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, updatedDownvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const handleDownvoteToggle = async () => {\n    try {\n      if (isDownvoted) {\n        const updatedDownvotedBy = downvotedBy.filter(d => d !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, upvotedBy));\n      } else {\n        const updatedDownvotedBy = [...downvotedBy, user.id];\n        const updatedUpvotedBy = upvotedBy.filter(u => u !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, updatedUpvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const formattedLink = postType === 'Link' && trimLink(prettifyLink(linkSubmission), 70);\n  const trimmedText = textSubmission && (textSubmission.length < 100 ? textSubmission : textSubmission.slice(0, 100).concat('....'));\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    variant: \"outlined\",\n    className: classes.mainPaper,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.votesWrapper,\n      children: [/*#__PURE__*/_jsxDEV(UpvoteButton, {\n        user: user,\n        body: post,\n        handleUpvote: handleUpvoteToggle,\n        size: isMobile ? 'small' : 'medium'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        style: {\n          color: isUpvoted ? '#FF8b60' : isDownvoted ? '#9494FF' : darkMode ? '#e4e4e4' : '#333',\n          fontWeight: 600\n        },\n        children: pointsCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DownvoteButton, {\n        user: user,\n        body: post,\n        handleDownvote: handleDownvoteToggle,\n        size: isMobile ? 'small' : 'medium'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.postInfo,\n      component: RouterLink,\n      to: `/comments/${id}`,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          component: RouterLink,\n          to: `/r/${subreddit.subredditName}`,\n          children: `r/${subreddit.subredditName} `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          className: classes.userAndDate,\n          children: [\"\\u2022 Posted by\", /*#__PURE__*/_jsxDEV(Link, {\n            component: RouterLink,\n            to: `/u/${author.username}`,\n            children: ` u/${author.username} `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), \"\\u2022 \", /*#__PURE__*/_jsxDEV(TimeAgo, {\n            datetime: new Date(createdAt)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), createdAt !== updatedAt && /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [' â€¢ edited', \" \", /*#__PURE__*/_jsxDEV(TimeAgo, {\n              datetime: new Date(updatedAt)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        className: classes.title,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), postType === 'Text' ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: ReactHtmlParser(trimmedText)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this) : postType === 'Image' ? /*#__PURE__*/_jsxDEV(\"a\", {\n        href: imageSubmission.imageLink,\n        alt: title,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: classes.imagePost,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: title,\n          src: imageSubmission.imageLink,\n          className: classes.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Link, {\n        href: fixUrl(linkSubmission),\n        children: [formattedLink, \" \", /*#__PURE__*/_jsxDEV(OpenInNewIcon, {\n          fontSize: \"inherit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserPostCard, \"oicmcgsUPKu2IBNj9+buxJLK7m8=\", false, function () {\n  return [useUserPostCardStyles, useDispatch, useSelector];\n});\n\n_c = UserPostCard;\nexport default UserPostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPostCard\");","map":{"version":3,"sources":["/home/wilder/Desktop/hackathon3/client/src/components/UserPostCard.js"],"names":["React","Link","RouterLink","useDispatch","useSelector","toggleUpvote","toggleDownvote","notify","UpvoteButton","DownvoteButton","TimeAgo","ReactHtmlParser","trimLink","prettifyLink","fixUrl","OpenInNewIcon","CommentIcon","getErrorMsg","Paper","Typography","Button","useUserPostCardStyles","UserPostCard","post","user","isMobile","classes","dispatch","darkMode","state","id","title","postType","textSubmission","linkSubmission","imageSubmission","subreddit","author","upvotedBy","downvotedBy","pointsCount","commentCount","createdAt","updatedAt","isUpvoted","includes","isDownvoted","handleUpvoteToggle","updatedUpvotedBy","filter","u","updatedDownvotedBy","d","err","handleDownvoteToggle","formattedLink","trimmedText","length","slice","concat","mainPaper","votesWrapper","color","fontWeight","postInfo","subredditName","userAndDate","username","Date","imageLink","imagePost","image"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleUpvote, toggleDownvote } from '../reducers/userPageReducer';\nimport { notify } from '../reducers/notificationReducer';\nimport { UpvoteButton, DownvoteButton } from './VoteButtons';\nimport TimeAgo from 'timeago-react';\nimport ReactHtmlParser from 'react-html-parser';\nimport { trimLink, prettifyLink, fixUrl } from '../utils/formatUrl';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport { Paper, Typography, Link, Button } from '@material-ui/core';\nimport { useUserPostCardStyles } from '../styles/muiStyles';\n\nconst UserPostCard = ({ post, user, isMobile }) => {\n  const classes = useUserPostCardStyles();\n  const dispatch = useDispatch();\n  const { darkMode } = useSelector((state) => state);\n\n  const {\n    id,\n    title,\n    postType,\n    textSubmission,\n    linkSubmission,\n    imageSubmission,\n    subreddit,\n    author,\n    upvotedBy,\n    downvotedBy,\n    pointsCount,\n    commentCount,\n    createdAt,\n    updatedAt,\n  } = post;\n\n  const isUpvoted = user && upvotedBy.includes(user.id);\n  const isDownvoted = user && downvotedBy.includes(user.id);\n\n  const handleUpvoteToggle = async () => {\n    try {\n      if (isUpvoted) {\n        const updatedUpvotedBy = upvotedBy.filter((u) => u !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, downvotedBy));\n      } else {\n        const updatedUpvotedBy = [...upvotedBy, user.id];\n        const updatedDownvotedBy = downvotedBy.filter((d) => d !== user.id);\n        dispatch(toggleUpvote(id, updatedUpvotedBy, updatedDownvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const handleDownvoteToggle = async () => {\n    try {\n      if (isDownvoted) {\n        const updatedDownvotedBy = downvotedBy.filter((d) => d !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, upvotedBy));\n      } else {\n        const updatedDownvotedBy = [...downvotedBy, user.id];\n        const updatedUpvotedBy = upvotedBy.filter((u) => u !== user.id);\n        dispatch(toggleDownvote(id, updatedDownvotedBy, updatedUpvotedBy));\n      }\n    } catch (err) {\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  const formattedLink =\n    postType === 'Link' && trimLink(prettifyLink(linkSubmission), 70);\n\n  const trimmedText =\n    textSubmission &&\n    (textSubmission.length < 100\n      ? textSubmission\n      : textSubmission.slice(0, 100).concat('....'));\n\n  return (\n    <Paper variant='outlined' className={classes.mainPaper}>\n      <div className={classes.votesWrapper}>\n        <UpvoteButton\n          user={user}\n          body={post}\n          handleUpvote={handleUpvoteToggle}\n          size={isMobile ? 'small' : 'medium'}\n        />\n        <Typography\n          variant='body1'\n          style={{\n            color: isUpvoted\n              ? '#FF8b60'\n              : isDownvoted\n              ? '#9494FF'\n              : darkMode\n              ? '#e4e4e4'\n              : '#333',\n            fontWeight: 600,\n          }}\n        >\n          {pointsCount}\n        </Typography>\n        <DownvoteButton\n          user={user}\n          body={post}\n          handleDownvote={handleDownvoteToggle}\n          size={isMobile ? 'small' : 'medium'}\n        />\n      </div>\n      <div\n        className={classes.postInfo}\n        component={RouterLink}\n        to={`/comments/${id}`}\n      >\n        <Typography variant='subtitle2'>\n          <Link component={RouterLink} to={`/r/${subreddit.subredditName}`}>\n            {`r/${subreddit.subredditName} `}\n          </Link>\n          <Typography variant='caption' className={classes.userAndDate}>\n            â€¢ Posted by\n            <Link component={RouterLink} to={`/u/${author.username}`}>\n              {` u/${author.username} `}\n            </Link>\n            â€¢ <TimeAgo datetime={new Date(createdAt)} />\n            {createdAt !== updatedAt && (\n              <em>\n                {' â€¢ edited'} <TimeAgo datetime={new Date(updatedAt)} />\n              </em>\n            )}\n          </Typography>\n        </Typography>\n        <Typography variant='h5' className={classes.title}>\n          {title}\n        </Typography>\n        {postType === 'Text' ? (\n          <Typography variant='body1'>\n            {ReactHtmlParser(trimmedText)}\n          </Typography>\n        ) : postType === 'Image' ? (\n          <a\n            href={imageSubmission.imageLink}\n            alt={title}\n            target='_blank'\n            rel='noopener noreferrer'\n            className={classes.imagePost}\n          >\n            <img\n              alt={title}\n              src={imageSubmission.imageLink}\n              className={classes.image}\n            />\n          </a>\n        ) : (\n          <Link href={fixUrl(linkSubmission)}>\n            {formattedLink} <OpenInNewIcon fontSize='inherit' />\n          </Link>\n        )}\n        <div></div>\n      </div>\n    </Paper>\n  );\n};\n\nexport default UserPostCard;\n"]},"metadata":{},"sourceType":"module"}