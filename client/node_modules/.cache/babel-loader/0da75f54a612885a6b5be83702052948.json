{"ast":null,"code":"var _jsxFileName = \"/home/tb/hackathon3/client/src/components/SubForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = yup.object({\n  subredditName: yup.string().required('Required').max(20, 'Must be at most 20 characters').min(3, 'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/, 'Only alphanumeric characters allowed, no spaces/symbols'),\n  description: yup.string().required('Required').max(100, 'Must be at most 100 characters').min(3, 'Must be at least 3 characters')\n});\n\nconst SubForm = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n\n  const handleCreateSub = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(notify(`New subreddish created: r/${values.subredditName}`, 'success'));\n      history.push(`/r/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.formWrapper,\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      validateOnChange: true,\n      initialValues: {\n        subredditName: '',\n        description: ''\n      },\n      onSubmit: handleCreateSub,\n      validationSchema: validationSchema,\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        className: classes.form,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.input,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.inputIconText,\n            color: \"primary\",\n            variant: \"h5\",\n            children: \"r/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"subredditName\",\n            type: \"text\",\n            placeholder: \"Enter name\",\n            label: \"Subreddish Name\",\n            required: true,\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.descInput,\n          children: [/*#__PURE__*/_jsxDEV(InfoIcon, {\n            className: classes.inputIcon,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"description\",\n            type: \"text\",\n            placeholder: \"Enter description\",\n            label: \"Description\",\n            required: true,\n            fullWidth: true,\n            variant: \"outlined\",\n            multiline: true,\n            rows: 2,\n            maxRows: Infinity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          color: \"secondary\",\n          variant: \"contained\",\n          size: \"large\",\n          className: classes.submitButton,\n          disabled: isSubmitting,\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 26\n          }, this),\n          children: isSubmitting ? 'Creating' : 'Create Subreddish'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AlertMessage, {\n      error: error,\n      severity: \"error\",\n      clearError: () => setError(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SubForm, \"AXAcx1Sv0BzJLZitFzTAf6zWQo4=\", false, function () {\n  return [useDispatch, useSubredditFormStyles, useHistory];\n});\n\n_c = SubForm;\nexport default SubForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubForm\");","map":{"version":3,"sources":["/home/tb/hackathon3/client/src/components/SubForm.js"],"names":["React","useState","useDispatch","useHistory","addNewSub","Formik","Form","TextInput","notify","AlertMessage","yup","getErrorMsg","useSubredditFormStyles","Button","Typography","InfoIcon","AddIcon","validationSchema","object","subredditName","string","required","max","min","matches","description","SubForm","error","setError","dispatch","classes","history","handleCreateSub","values","setSubmitting","push","err","formWrapper","isSubmitting","form","input","inputIconText","descInput","inputIcon","Infinity","submitButton"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,SAASC,sBAAT,QAAuC,qBAAvC;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,mBAAnC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;AAEA,MAAMC,gBAAgB,GAAGP,GAAG,CAACQ,MAAJ,CAAW;AAClCC,EAAAA,aAAa,EAAET,GAAG,CACfU,MADY,GAEZC,QAFY,CAEH,UAFG,EAGZC,GAHY,CAGR,EAHQ,EAGJ,+BAHI,EAIZC,GAJY,CAIR,CAJQ,EAIL,+BAJK,EAKZC,OALY,CAMX,kBANW,EAOX,yDAPW,CADmB;AAUlCC,EAAAA,WAAW,EAAEf,GAAG,CACbU,MADU,GAEVC,QAFU,CAED,UAFC,EAGVC,GAHU,CAGN,GAHM,EAGD,gCAHC,EAIVC,GAJU,CAIN,CAJM,EAIH,+BAJG;AAVqB,CAAX,CAAzB;;AAiBA,MAAMG,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM4B,QAAQ,GAAG3B,WAAW,EAA5B;AACA,QAAM4B,OAAO,GAAGlB,sBAAsB,EAAtC;AACA,QAAMmB,OAAO,GAAG5B,UAAU,EAA1B;;AAEA,QAAM6B,eAAe,GAAG,OAAOC,MAAP,EAAe;AAAEC,IAAAA;AAAF,GAAf,KAAqC;AAC3D,QAAI;AACFA,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,YAAML,QAAQ,CAACzB,SAAS,CAAC6B,MAAD,CAAV,CAAd;AACAC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAL,MAAAA,QAAQ,CACNrB,MAAM,CAAE,6BAA4ByB,MAAM,CAACd,aAAc,EAAnD,EAAsD,SAAtD,CADA,CAAR;AAGAY,MAAAA,OAAO,CAACI,IAAR,CAAc,MAAKF,MAAM,CAACd,aAAc,EAAxC;AACD,KARD,CAQE,OAAOiB,GAAP,EAAY;AACZF,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAL,MAAAA,QAAQ,CAACrB,MAAM,CAACG,WAAW,CAACyB,GAAD,CAAZ,EAAmB,OAAnB,CAAP,CAAR;AACD;AACF,GAbD;;AAeA,sBACE;AAAK,IAAA,SAAS,EAAEN,OAAO,CAACO,WAAxB;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,gBAAgB,EAAE,IADpB;AAEE,MAAA,aAAa,EAAE;AAAElB,QAAAA,aAAa,EAAE,EAAjB;AAAqBM,QAAAA,WAAW,EAAE;AAAlC,OAFjB;AAGE,MAAA,QAAQ,EAAEO,eAHZ;AAIE,MAAA,gBAAgB,EAAEf,gBAJpB;AAAA,gBAMG,CAAC;AAAEqB,QAAAA;AAAF,OAAD,kBACC,QAAC,IAAD;AAAM,QAAA,SAAS,EAAER,OAAO,CAACS,IAAzB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAET,OAAO,CAACU,KAAxB;AAAA,kCACE,QAAC,UAAD;AACE,YAAA,SAAS,EAAEV,OAAO,CAACW,aADrB;AAEE,YAAA,KAAK,EAAC,SAFR;AAGE,YAAA,OAAO,EAAC,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE,QAAC,SAAD;AACE,YAAA,IAAI,EAAC,eADP;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,WAAW,EAAC,YAHd;AAIE,YAAA,KAAK,EAAC,iBAJR;AAKE,YAAA,QAAQ,MALV;AAME,YAAA,SAAS;AANX;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAkBE;AAAK,UAAA,SAAS,EAAEX,OAAO,CAACY,SAAxB;AAAA,kCACE,QAAC,QAAD;AAAU,YAAA,SAAS,EAAEZ,OAAO,CAACa,SAA7B;AAAwC,YAAA,KAAK,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AACE,YAAA,IAAI,EAAC,aADP;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,WAAW,EAAC,mBAHd;AAIE,YAAA,KAAK,EAAC,aAJR;AAKE,YAAA,QAAQ,MALV;AAME,YAAA,SAAS,MANX;AAOE,YAAA,OAAO,EAAC,UAPV;AAQE,YAAA,SAAS,MARX;AASE,YAAA,IAAI,EAAE,CATR;AAUE,YAAA,OAAO,EAAEC;AAVX;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBF,eAiCE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAC,WAFR;AAGE,UAAA,OAAO,EAAC,WAHV;AAIE,UAAA,IAAI,EAAC,OAJP;AAKE,UAAA,SAAS,EAAEd,OAAO,CAACe,YALrB;AAME,UAAA,QAAQ,EAAEP,YANZ;AAOE,UAAA,SAAS,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBAPb;AAAA,oBASGA,YAAY,GAAG,UAAH,GAAgB;AAT/B;AAAA;AAAA;AAAA;AAAA,gBAjCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YADF,eAuDE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEX,KADT;AAEE,MAAA,QAAQ,EAAC,OAFX;AAGE,MAAA,UAAU,EAAE,MAAMC,QAAQ,CAAC,IAAD;AAH5B;AAAA;AAAA;AAAA;AAAA,YAvDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+DD,CApFD;;GAAMF,O;UAEaxB,W,EACDU,sB,EACAT,U;;;KAJZuB,O;AAsFN,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst validationSchema = yup.object({\n  subredditName: yup\n    .string()\n    .required('Required')\n    .max(20, 'Must be at most 20 characters')\n    .min(3, 'Must be at least 3 characters')\n    .matches(\n      /^[a-zA-Z0-9-_]*$/,\n      'Only alphanumeric characters allowed, no spaces/symbols'\n    ),\n  description: yup\n    .string()\n    .required('Required')\n    .max(100, 'Must be at most 100 characters')\n    .min(3, 'Must be at least 3 characters'),\n});\n\nconst SubForm = () => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n\n  const handleCreateSub = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(\n        notify(`New subreddish created: r/${values.subredditName}`, 'success')\n      );\n      history.push(`/r/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return (\n    <div className={classes.formWrapper}>\n      <Formik\n        validateOnChange={true}\n        initialValues={{ subredditName: '', description: '' }}\n        onSubmit={handleCreateSub}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting }) => (\n          <Form className={classes.form}>\n            <div className={classes.input}>\n              <Typography\n                className={classes.inputIconText}\n                color='primary'\n                variant='h5'\n              >\n                r/\n              </Typography>\n              <TextInput\n                name='subredditName'\n                type='text'\n                placeholder='Enter name'\n                label='Subreddish Name'\n                required\n                fullWidth\n              />\n            </div>\n            <div className={classes.descInput}>\n              <InfoIcon className={classes.inputIcon} color='primary' />\n              <TextInput\n                name='description'\n                type='text'\n                placeholder='Enter description'\n                label='Description'\n                required\n                fullWidth\n                variant='outlined'\n                multiline\n                rows={2}\n                maxRows={Infinity}\n              />\n            </div>\n            <Button\n              type='submit'\n              color='secondary'\n              variant='contained'\n              size='large'\n              className={classes.submitButton}\n              disabled={isSubmitting}\n              startIcon={<AddIcon />}\n            >\n              {isSubmitting ? 'Creating' : 'Create Subreddish'}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <AlertMessage\n        error={error}\n        severity='error'\n        clearError={() => setError(null)}\n      />\n    </div>\n  );\n};\n\nexport default SubForm;\n"]},"metadata":{},"sourceType":"module"}