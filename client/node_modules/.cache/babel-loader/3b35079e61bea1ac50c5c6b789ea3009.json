{"ast":null,"code":"import userService from '../services/user';\nimport postService from '../services/posts';\n\nconst userPageReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'FETCH_USER':\n      return action.payload;\n\n    case 'TOGGLE_USERPAGE_VOTE':\n      return { ...state,\n        posts: { ...state.posts,\n          results: state.posts.results.map(r => r.id !== action.payload.id ? r : { ...r,\n            ...action.payload.data\n          })\n        }\n      };\n\n    case 'LOAD_USER_POSTS':\n      return { ...state,\n        posts: { ...action.payload.posts,\n          results: [...state.posts.results, ...action.payload.posts.results]\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const fetchUser = username => {\n  return async dispatch => {\n    const user = await userService.getUser(username, 5, 1);\n    dispatch({\n      type: 'FETCH_USER',\n      payload: user\n    });\n  };\n};\nexport const loadUserPosts = (username, page) => {\n  return async dispatch => {\n    const user = await userService.getUser(username, 5, page);\n    dispatch({\n      type: 'LOAD_USER_POSTS',\n      payload: user\n    });\n  };\n};\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_USERPAGE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.upvotePost(id);\n  };\n};\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async dispatch => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_USERPAGE_VOTE',\n      payload: {\n        id,\n        data: {\n          upvotedBy,\n          pointsCount,\n          downvotedBy\n        }\n      }\n    });\n    await postService.downvotePost(id);\n  };\n};\nexport default userPageReducer;","map":{"version":3,"sources":["/home/tb/hackathon3/client/src/reducers/userPageReducer.js"],"names":["userService","postService","userPageReducer","state","action","type","payload","posts","results","map","r","id","data","fetchUser","username","dispatch","user","getUser","loadUserPosts","page","toggleUpvote","upvotedBy","downvotedBy","pointsCount","length","upvotePost","toggleDownvote","downvotePost"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG,IAAT,EAAeC,MAAf,KAA0B;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAOD,MAAM,CAACE,OAAd;;AACF,SAAK,sBAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,KAAK,EAAE,EACL,GAAGJ,KAAK,CAACI,KADJ;AAELC,UAAAA,OAAO,EAAEL,KAAK,CAACI,KAAN,CAAYC,OAAZ,CAAoBC,GAApB,CAAyBC,CAAD,IAC/BA,CAAC,CAACC,EAAF,KAASP,MAAM,CAACE,OAAP,CAAeK,EAAxB,GAA6BD,CAA7B,GAAiC,EAAE,GAAGA,CAAL;AAAQ,eAAGN,MAAM,CAACE,OAAP,CAAeM;AAA1B,WAD1B;AAFJ;AAFF,OAAP;;AASF,SAAK,iBAAL;AACE,aAAO,EACL,GAAGT,KADE;AAELI,QAAAA,KAAK,EAAE,EACL,GAAGH,MAAM,CAACE,OAAP,CAAeC,KADb;AAELC,UAAAA,OAAO,EAAE,CAAC,GAAGL,KAAK,CAACI,KAAN,CAAYC,OAAhB,EAAyB,GAAGJ,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqBC,OAAjD;AAFJ;AAFF,OAAP;;AAOF;AACE,aAAOL,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,OAAO,MAAMU,SAAS,GAAIC,QAAD,IAAc;AACrC,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,IAAI,GAAG,MAAMhB,WAAW,CAACiB,OAAZ,CAAoBH,QAApB,EAA8B,CAA9B,EAAiC,CAAjC,CAAnB;AAEAC,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,OAAO,EAAEU;AAFF,KAAD,CAAR;AAID,GAPD;AAQD,CATM;AAWP,OAAO,MAAME,aAAa,GAAG,CAACJ,QAAD,EAAWK,IAAX,KAAoB;AAC/C,SAAO,MAAOJ,QAAP,IAAoB;AACzB,UAAMC,IAAI,GAAG,MAAMhB,WAAW,CAACiB,OAAZ,CAAoBH,QAApB,EAA8B,CAA9B,EAAiCK,IAAjC,CAAnB;AAEAJ,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,iBADC;AAEPC,MAAAA,OAAO,EAAEU;AAFF,KAAD,CAAR;AAID,GAPD;AAQD,CATM;AAWP,OAAO,MAAMI,YAAY,GAAG,CAACT,EAAD,EAAKU,SAAL,EAAgBC,WAAhB,KAAgC;AAC1D,SAAO,MAAOP,QAAP,IAAoB;AACzB,QAAIQ,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmBF,WAAW,CAACE,MAAjD;;AACA,QAAID,WAAW,GAAG,CAAlB,EAAqB;AACnBA,MAAAA,WAAW,GAAG,CAAd;AACD;;AAEDR,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,sBADC;AAEPC,MAAAA,OAAO,EAAE;AAAEK,QAAAA,EAAF;AAAMC,QAAAA,IAAI,EAAE;AAAES,UAAAA,SAAF;AAAaE,UAAAA,WAAb;AAA0BD,UAAAA;AAA1B;AAAZ;AAFF,KAAD,CAAR;AAKA,UAAMrB,WAAW,CAACwB,UAAZ,CAAuBd,EAAvB,CAAN;AACD,GAZD;AAaD,CAdM;AAgBP,OAAO,MAAMe,cAAc,GAAG,CAACf,EAAD,EAAKW,WAAL,EAAkBD,SAAlB,KAAgC;AAC5D,SAAO,MAAON,QAAP,IAAoB;AACzB,QAAIQ,WAAW,GAAGF,SAAS,CAACG,MAAV,GAAmBF,WAAW,CAACE,MAAjD;;AACA,QAAID,WAAW,GAAG,CAAlB,EAAqB;AACnBA,MAAAA,WAAW,GAAG,CAAd;AACD;;AAEDR,IAAAA,QAAQ,CAAC;AACPV,MAAAA,IAAI,EAAE,sBADC;AAEPC,MAAAA,OAAO,EAAE;AAAEK,QAAAA,EAAF;AAAMC,QAAAA,IAAI,EAAE;AAAES,UAAAA,SAAF;AAAaE,UAAAA,WAAb;AAA0BD,UAAAA;AAA1B;AAAZ;AAFF,KAAD,CAAR;AAKA,UAAMrB,WAAW,CAAC0B,YAAZ,CAAyBhB,EAAzB,CAAN;AACD,GAZD;AAaD,CAdM;AAgBP,eAAeT,eAAf","sourcesContent":["import userService from '../services/user';\nimport postService from '../services/posts';\n\nconst userPageReducer = (state = null, action) => {\n  switch (action.type) {\n    case 'FETCH_USER':\n      return action.payload;\n    case 'TOGGLE_USERPAGE_VOTE':\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          results: state.posts.results.map((r) =>\n            r.id !== action.payload.id ? r : { ...r, ...action.payload.data }\n          ),\n        },\n      };\n    case 'LOAD_USER_POSTS':\n      return {\n        ...state,\n        posts: {\n          ...action.payload.posts,\n          results: [...state.posts.results, ...action.payload.posts.results],\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const fetchUser = (username) => {\n  return async (dispatch) => {\n    const user = await userService.getUser(username, 5, 1);\n\n    dispatch({\n      type: 'FETCH_USER',\n      payload: user,\n    });\n  };\n};\n\nexport const loadUserPosts = (username, page) => {\n  return async (dispatch) => {\n    const user = await userService.getUser(username, 5, page);\n\n    dispatch({\n      type: 'LOAD_USER_POSTS',\n      payload: user,\n    });\n  };\n};\n\nexport const toggleUpvote = (id, upvotedBy, downvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_USERPAGE_VOTE',\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.upvotePost(id);\n  };\n};\n\nexport const toggleDownvote = (id, downvotedBy, upvotedBy) => {\n  return async (dispatch) => {\n    let pointsCount = upvotedBy.length - downvotedBy.length;\n    if (pointsCount < 0) {\n      pointsCount = 0;\n    }\n\n    dispatch({\n      type: 'TOGGLE_USERPAGE_VOTE',\n      payload: { id, data: { upvotedBy, pointsCount, downvotedBy } },\n    });\n\n    await postService.downvotePost(id);\n  };\n};\n\nexport default userPageReducer;\n"]},"metadata":{},"sourceType":"module"}