{"ast":null,"code":"var _jsxFileName = \"/home/wilder/Desktop/reddish/client/src/components/PostFormModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PostForm from './PostForm';\nimport HideOnScroll from './HideOnScroll';\nimport { getCircularAvatar } from '../utils/cloudinaryTransform';\nimport { DialogTitle, DialogContent } from './CustomDialogTitle';\nimport { Dialog, Button, Fab, IconButton, Paper, Avatar, useMediaQuery, MenuItem, ListItemIcon } from '@material-ui/core';\nimport { useDialogStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LinkIcon from '@material-ui/icons/Link';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst AddPostModal = ({\n  actionType,\n  handleMenuClose,\n  postToEditType,\n  postToEditTitle,\n  postToEditSub,\n  postToEditId,\n  textSubmission,\n  linkSubmission,\n  fromSubreddit\n}) => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const [postType, setPostType] = useState('Text');\n  const user = useSelector(state => state.user);\n  const classes = useDialogStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleTextPost = () => {\n    setPostType('Text');\n    handleClickOpen();\n  };\n\n  const handleImagePost = () => {\n    setPostType('Image');\n    handleClickOpen();\n  };\n\n  const handleLinkPost = () => {\n    setPostType('Link');\n    handleClickOpen();\n  };\n\n  const handleMenuClick = () => {\n    handleClickOpen();\n    handleMenuClose();\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, actionType === 'edit' ? /*#__PURE__*/React.createElement(MenuItem, {\n    onClick: handleMenuClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(EditIcon, {\n    style: {\n      marginRight: 7\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), \"Edit Post\")) : isMobile ? /*#__PURE__*/React.createElement(HideOnScroll, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Fab, {\n    className: classes.fab,\n    color: \"primary\",\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PostAddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(Paper, {\n    variant: \"outlined\",\n    className: classes.createPostWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, user.avatar && user.avatar.exists ? /*#__PURE__*/React.createElement(Avatar, {\n    alt: user.username,\n    src: getCircularAvatar(user.avatar.imageLink),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.defaultAvatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, user.username[0]), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    variant: \"outlined\",\n    onClick: handleTextPost,\n    fullWidth: true,\n    className: classes.createBtn,\n    startIcon: /*#__PURE__*/React.createElement(PostAddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 24\n      }\n    }),\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Create Post\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.iconGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: handleImagePost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ImageIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: handleLinkPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LinkIcon, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    classes: {\n      paper: classes.dialogWrapper\n    },\n    maxWidth: \"md\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, actionType === 'edit' ? 'Update your post' : 'Add a new post'), /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PostForm, {\n    actionType: actionType,\n    postType: postType,\n    postToEditType: postToEditType,\n    postToEditTitle: postToEditTitle,\n    postToEditSub: postToEditSub,\n    postToEditId: postToEditId,\n    textSubmission: textSubmission,\n    linkSubmission: linkSubmission,\n    fromSubreddit: fromSubreddit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(AddPostModal, \"Je691RC1NK/sfwgkxyyRWMf+giQ=\", false, function () {\n  return [useSelector, useDialogStyles, useTheme, useMediaQuery];\n});\n\n_c = AddPostModal;\nexport default AddPostModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPostModal\");","map":{"version":3,"sources":["/home/wilder/Desktop/reddish/client/src/components/PostFormModal.js"],"names":["React","useState","useSelector","PostForm","HideOnScroll","getCircularAvatar","DialogTitle","DialogContent","Dialog","Button","Fab","IconButton","Paper","Avatar","useMediaQuery","MenuItem","ListItemIcon","useDialogStyles","useTheme","PostAddIcon","ImageIcon","LinkIcon","EditIcon","AddPostModal","actionType","handleMenuClose","postToEditType","postToEditTitle","postToEditSub","postToEditId","textSubmission","linkSubmission","fromSubreddit","open","setOpen","postType","setPostType","user","state","classes","theme","isMobile","breakpoints","down","handleClickOpen","handleClose","handleTextPost","handleImagePost","handleLinkPost","handleMenuClick","marginRight","fab","createPostWrapper","avatar","exists","username","imageLink","defaultAvatar","createBtn","iconGroup","paper","dialogWrapper"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PostForm from './PostForm';\nimport HideOnScroll from './HideOnScroll';\nimport { getCircularAvatar } from '../utils/cloudinaryTransform';\n\nimport { DialogTitle, DialogContent } from './CustomDialogTitle';\nimport {\n  Dialog,\n  Button,\n  Fab,\n  IconButton,\n  Paper,\n  Avatar,\n  useMediaQuery,\n  MenuItem,\n  ListItemIcon,\n} from '@material-ui/core';\nimport { useDialogStyles } from '../styles/muiStyles';\nimport { useTheme } from '@material-ui/core/styles';\nimport PostAddIcon from '@material-ui/icons/PostAdd';\nimport ImageIcon from '@material-ui/icons/Image';\nimport LinkIcon from '@material-ui/icons/Link';\nimport EditIcon from '@material-ui/icons/Edit';\n\nconst AddPostModal = ({\n  actionType,\n  handleMenuClose,\n  postToEditType,\n  postToEditTitle,\n  postToEditSub,\n  postToEditId,\n  textSubmission,\n  linkSubmission,\n  fromSubreddit,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [postType, setPostType] = useState('Text');\n  const user = useSelector((state) => state.user);\n\n  const classes = useDialogStyles();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleTextPost = () => {\n    setPostType('Text');\n    handleClickOpen();\n  };\n\n  const handleImagePost = () => {\n    setPostType('Image');\n    handleClickOpen();\n  };\n\n  const handleLinkPost = () => {\n    setPostType('Link');\n    handleClickOpen();\n  };\n\n  const handleMenuClick = () => {\n    handleClickOpen();\n    handleMenuClose();\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div>\n      {actionType === 'edit' ? (\n        <MenuItem onClick={handleMenuClick}>\n          <ListItemIcon>\n            <EditIcon style={{ marginRight: 7 }} />\n            Edit Post\n          </ListItemIcon>\n        </MenuItem>\n      ) : isMobile ? (\n        <HideOnScroll>\n          <Fab\n            className={classes.fab}\n            color=\"primary\"\n            onClick={handleClickOpen}\n          >\n            <PostAddIcon />\n          </Fab>\n        </HideOnScroll>\n      ) : (\n        <Paper variant=\"outlined\" className={classes.createPostWrapper}>\n          {user.avatar && user.avatar.exists ? (\n            <Avatar\n              alt={user.username}\n              src={getCircularAvatar(user.avatar.imageLink)}\n            />\n          ) : (\n            <Avatar className={classes.defaultAvatar}>\n              {user.username[0]}\n            </Avatar>\n          )}\n          <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={handleTextPost}\n            fullWidth\n            className={classes.createBtn}\n            startIcon={<PostAddIcon />}\n            size=\"large\"\n          >\n            Create Post\n          </Button>\n          <div className={classes.iconGroup}>\n            <IconButton onClick={handleImagePost}>\n              <ImageIcon color=\"primary\" />\n            </IconButton>\n            <IconButton onClick={handleLinkPost}>\n              <LinkIcon color=\"primary\" />\n            </IconButton>\n          </div>\n        </Paper>\n      )}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        classes={{ paper: classes.dialogWrapper }}\n        maxWidth=\"md\"\n        fullWidth={true}\n      >\n        <DialogTitle onClose={handleClose}>\n          {actionType === 'edit' ? 'Update your post' : 'Add a new post'}\n        </DialogTitle>\n        <DialogContent>\n          <PostForm\n            actionType={actionType}\n            postType={postType}\n            postToEditType={postToEditType}\n            postToEditTitle={postToEditTitle}\n            postToEditSub={postToEditSub}\n            postToEditId={postToEditId}\n            textSubmission={textSubmission}\n            linkSubmission={linkSubmission}\n            fromSubreddit={fromSubreddit}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AddPostModal;\n"]},"metadata":{},"sourceType":"module"}