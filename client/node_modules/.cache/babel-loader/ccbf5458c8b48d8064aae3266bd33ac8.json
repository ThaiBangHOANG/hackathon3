{"ast":null,"code":"var _jsxFileName = \"/home/wilder/Desktop/reddish/client/src/components/SubForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\nconst validationSchema = yup.object({\n  subredditName: yup.string().required('Required').max(20, 'Must be at most 20 characters').min(3, 'Must be at least 3 characters').matches(/^[a-zA-Z0-9-_]*$/, 'Only alphanumeric characters allowed, no spaces/symbols'),\n  description: yup.string().required('Required').max(100, 'Must be at most 100 characters').min(3, 'Must be at least 3 characters')\n});\n\nconst SubForm = () => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n\n  const handleCreateSub = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(notify(`New subreddish created: r/${values.subredditName}`, 'success'));\n      history.push(`/r/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.formWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    validateOnChange: true,\n    initialValues: {\n      subredditName: '',\n      description: ''\n    },\n    onSubmit: handleCreateSub,\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => /*#__PURE__*/React.createElement(Form, {\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.inputIconText,\n    color: \"primary\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, \"r/\"), /*#__PURE__*/React.createElement(TextInput, {\n    name: \"subredditName\",\n    type: \"text\",\n    placeholder: \"Enter name\",\n    label: \"Subreddish Name\",\n    required: true,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.descInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    className: classes.inputIcon,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TextInput, {\n    name: \"description\",\n    type: \"text\",\n    placeholder: \"Enter description\",\n    label: \"Description\",\n    required: true,\n    fullWidth: true,\n    variant: \"outlined\",\n    multiline: true,\n    rows: 2,\n    maxRows: Infinity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"secondary\",\n    variant: \"contained\",\n    size: \"large\",\n    className: classes.submitButton,\n    disabled: isSubmitting,\n    startIcon: /*#__PURE__*/React.createElement(AddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, isSubmitting ? 'Creating' : 'Create Subreddish'))), /*#__PURE__*/React.createElement(AlertMessage, {\n    error: error,\n    severity: \"error\",\n    clearError: () => setError(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(SubForm, \"AXAcx1Sv0BzJLZitFzTAf6zWQo4=\", false, function () {\n  return [useDispatch, useSubredditFormStyles, useHistory];\n});\n\n_c = SubForm;\nexport default SubForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubForm\");","map":{"version":3,"sources":["/home/wilder/Desktop/reddish/client/src/components/SubForm.js"],"names":["React","useState","useDispatch","useHistory","addNewSub","Formik","Form","TextInput","notify","AlertMessage","yup","getErrorMsg","useSubredditFormStyles","Button","Typography","InfoIcon","AddIcon","validationSchema","object","subredditName","string","required","max","min","matches","description","SubForm","error","setError","dispatch","classes","history","handleCreateSub","values","setSubmitting","push","err","formWrapper","isSubmitting","form","input","inputIconText","descInput","inputIcon","Infinity","submitButton"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { addNewSub } from '../reducers/subReducer';\nimport { Formik, Form } from 'formik';\nimport { TextInput } from './FormikMuiFields';\nimport { notify } from '../reducers/notificationReducer';\nimport AlertMessage from './AlertMessage';\nimport * as yup from 'yup';\nimport getErrorMsg from '../utils/getErrorMsg';\n\nimport { useSubredditFormStyles } from '../styles/muiStyles';\nimport { Button, Typography } from '@material-ui/core';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst validationSchema = yup.object({\n  subredditName: yup\n    .string()\n    .required('Required')\n    .max(20, 'Must be at most 20 characters')\n    .min(3, 'Must be at least 3 characters')\n    .matches(\n      /^[a-zA-Z0-9-_]*$/,\n      'Only alphanumeric characters allowed, no spaces/symbols'\n    ),\n  description: yup\n    .string()\n    .required('Required')\n    .max(100, 'Must be at most 100 characters')\n    .min(3, 'Must be at least 3 characters'),\n});\n\nconst SubForm = () => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const classes = useSubredditFormStyles();\n  const history = useHistory();\n\n  const handleCreateSub = async (values, { setSubmitting }) => {\n    try {\n      setSubmitting(true);\n      await dispatch(addNewSub(values));\n      setSubmitting(false);\n      dispatch(\n        notify(`New subreddish created: r/${values.subredditName}`, 'success')\n      );\n      history.push(`/r/${values.subredditName}`);\n    } catch (err) {\n      setSubmitting(false);\n      dispatch(notify(getErrorMsg(err), 'error'));\n    }\n  };\n\n  return (\n    <div className={classes.formWrapper}>\n      <Formik\n        validateOnChange={true}\n        initialValues={{ subredditName: '', description: '' }}\n        onSubmit={handleCreateSub}\n        validationSchema={validationSchema}\n      >\n        {({ isSubmitting }) => (\n          <Form className={classes.form}>\n            <div className={classes.input}>\n              <Typography\n                className={classes.inputIconText}\n                color=\"primary\"\n                variant=\"h5\"\n              >\n                r/\n              </Typography>\n              <TextInput\n                name=\"subredditName\"\n                type=\"text\"\n                placeholder=\"Enter name\"\n                label=\"Subreddish Name\"\n                required\n                fullWidth\n              />\n            </div>\n            <div className={classes.descInput}>\n              <InfoIcon className={classes.inputIcon} color=\"primary\" />\n              <TextInput\n                name=\"description\"\n                type=\"text\"\n                placeholder=\"Enter description\"\n                label=\"Description\"\n                required\n                fullWidth\n                variant=\"outlined\"\n                multiline\n                rows={2}\n                maxRows={Infinity}\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              color=\"secondary\"\n              variant=\"contained\"\n              size=\"large\"\n              className={classes.submitButton}\n              disabled={isSubmitting}\n              startIcon={<AddIcon />}\n            >\n              {isSubmitting ? 'Creating' : 'Create Subreddish'}\n            </Button>\n          </Form>\n        )}\n      </Formik>\n      <AlertMessage\n        error={error}\n        severity=\"error\"\n        clearError={() => setError(null)}\n      />\n    </div>\n  );\n};\n\nexport default SubForm;\n"]},"metadata":{},"sourceType":"module"}